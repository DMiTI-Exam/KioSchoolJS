import{Utils}from"../utils/Utils.js";import{IManipulatorHelper}from"../../kioschool/controller/IManipulatorHelper.js";import{Graph}from"../model/Graph.js";import{SortStep}from"../steps/SortStep.js";export class KruskalController extends IManipulatorHelper{static ID="kruskal";static#g=new Graph;static#instance;static#canConstruct=false;#edge2number=new Map;#colorTable;static instanceGetter(){if(KruskalController.#instance==null){KruskalController.#canConstruct=true;KruskalController.#instance=new KruskalController;KruskalController.#canConstruct=false}return KruskalController.#instance}constructor(){super();if(!KruskalController.#canConstruct){throw new Error("Cannot construct a singleton class")}}init(){KruskalController.#g=new Graph;this.initializeEdge2Number();this.#initializeColorTable()}firstStepGetter(){return new SortStep}idGetter(){return KruskalController.ID}regimeChanged(regime){}graphGetter(){return KruskalController.#g}initializeEdge2Number(){this.#edge2number=new Map;let randomEdgesMix=KruskalController.#g.edgesGetter().slice();for(let i=1;i<randomEdgesMix.length;i++){let j=Utils.rnd(0,i);let t=randomEdgesMix[i];randomEdgesMix[i]=randomEdgesMix[j];randomEdgesMix[j]=t}let i=0;for(let e of randomEdgesMix){this.#edge2number.set(e,i++)}}#initializeColorTable(){this.#colorTable=[];let zeroDict=new Map;let i=0;for(let v of KruskalController.#g.verticesGetter()){zeroDict.set(v,i++)}this.#colorTable[0]=zeroDict}getVertexColorFromTable(vertex){return this.#colorTable[this.#colorTable.length-1].get(vertex)}countVertexColor(color){let result=0;let d=this.#colorTable[this.#colorTable.length-1];for(let c of d.values()){if(c===color){result++}}return result}recolorVerticesAndUpdateColorTable(edge){let d=new Map;let c1=this.getVertexColorFromTable(edge.v1);let c2=this.getVertexColorFromTable(edge.v2);if(this.countVertexColor(c1)>this.countVertexColor(c2)){c1=c1+c2;c2=c1-c2;c1=c1-c2}for(let v of KruskalController.#g.verticesGetter()){d.set(v,this.#colorTable[this.#colorTable.length-1].get(v)===c1?c2:this.#colorTable[this.#colorTable.length-1].get(v))}this.#colorTable.push(d)}PopUpFromColorTable(){this.#colorTable.pop()}getEdgePosition(e){return this.#edge2number.get(e)}getEdgeByPosition(pos){for(let e of KruskalController.#g.edgesGetter()){if(this.#edge2number.get(e)===pos){return e}}return null}exchangeTwoEdges(e1,e2){let tmp=this.#edge2number.get(e1);this.#edge2number.set(e1,this.#edge2number.get(e2));this.#edge2number.set(e2,tmp)}moveEdgeToPosition(e,pos){let oldPos=this.#edge2number.get(e);if(pos===oldPos){return}for(let ee of KruskalController.#g.edgesGetter()){let eepos=this.#edge2number.get(ee);if(oldPos<pos&&eepos>oldPos&&eepos<=pos){this.#edge2number.set(ee,eepos-1)}else if(oldPos>pos&&eepos<oldPos&&eepos>=pos){this.#edge2number.set(ee,eepos+1)}}this.#edge2number.set(e,pos)}isAscending(){for(let i=1;i<KruskalController.#g.edgesGetter().length;i++){if(this.getEdgeByPosition(i).lengthGetter()<this.getEdgeByPosition(i-1).lengthGetter()){return false}}return true}isDescending(){for(let i=1;i<KruskalController.#g.edgesGetter().length;i++){if(this.getEdgeByPosition(i).lengthGetter()>this.getEdgeByPosition(i-1).lengthGetter()){return false}}return true}reverseEdge2Number(){for(let e of KruskalController.#g.edgesGetter()){this.#edge2number.set(e,KruskalController.#g.edgesGetter().length-1-this.#edge2number.get(e))}}traceEdge2Number(){let delimiter="------------------------------------";console.log(delimiter);for(let i=0;i<KruskalController.#g.edgesGetter().length;i++){console.log("edge2number["+this.getEdgeByPosition(i).lengthGetter()+"] = "+i)}console.log(delimiter)}traceColorTable(){let delimiter="------------------------------------";console.log(delimiter);let i=0;for(;i<this.#colorTable.length;i++){let str="";for(let j of this.#colorTable[i]){let space=j<10?" ":"";str+=space+j+" | "}console.log(str)}console.log("Total rows = "+i);console.log(delimiter)}redrawInFinalGetter(){return false}redraw(_workspace){}needKeyboard(){return false}}