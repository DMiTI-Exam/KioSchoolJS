export class Graph{#vertexes=[];#edges=[];#view;constructor(){}vertexesGetter(){return this.#vertexes}edgesGetter(){return this.#edges}edgesSetter(arr){this.#edges=arr}viewGetter(){return this.#view}viewSetter(value){this.#view=value}getEdge(v1,v2){for(let i=0;i<this.#edges.length;i++){let edge=this.#edges[i];if(edge.sourceGetter().idGetter()===v1.idGetter()&&edge.targetGetter().idGetter()===v2.idGetter()){return edge}if(edge.sourceGetter().idGetter()===v2.idGetter()&&edge.targetGetter().idGetter()===v1.idGetter()){return edge}}return null}getIncidentEdges(v1){let sum=0;for(let i=0;i<this.#edges.length;i++){let edge=this.#edges[i];if(edge.sourceGetter().idGetter()===v1.idGetter()||edge.targetGetter().idGetter()===v1.idGetter()){sum++}}return sum}isPath(v1,v2){for(let vertex of this.#vertexes){vertex.labeledSetter(false)}this.#label(v1);return v2.labeledGetter()}#label(vertex){vertex.labeledSetter(true);for(let edge of this.#edges){if(edge.sourceGetter()===vertex&&!edge.targetGetter().labeledGetter()){this.#label(edge.targetGetter())}else if(edge.targetGetter()===vertex&&!edge.sourceGetter().labeledGetter()){this.#label(edge.sourceGetter())}}}removeEdge(edge){let ar=this.edgesGetter();this.edgesSetter([]);for(let e of ar){if(e!==edge){this.edgesGetter().push(e)}}}vertexesSetter(value){this.#vertexes=value}}